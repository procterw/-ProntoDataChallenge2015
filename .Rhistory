node1 <- img[8:34, 10:36]
display(node1)
node1 <- img[7:33, 10:36]
display(node1)
node1 <- img[8:33, 10:35]
display(node1)
display(img)
node1 <- img[12:37, 376:35]
display(node1)
node1 <- img[12:37, 376:401]
display(node1)
node1 <- img[10:35, 374:399]
display(node1)
node1 <- img[510:535, 478:503]
display(node1)
node1 <- img[510:535, 459:484]
display(node1)
node1 <- img[508:533, 459:484]
display(node1)
node1 <- img[507:532, 459:484]
display(node1)
(dim(img@.Data)[[1]]-25)
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
}
}
dim(img)
img <- img[1500:2000, 750:1250]
# 25x25 snapshots of nodes
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2000, 750:1250]
# 25x25 snapshots of nodes
node1 <- img[8:33, 10:35]
node2 <- img[10:35, 374:399]
node3 <- img[507:532, 459:484]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
}
}
source('~/.active-rstudio-document')
i = 1
j = 1
sample <- img[i:(i+25), j:(j+25)]
dif <- node1 - sample
dif <- norm(abs(nodes[[n]] - sample))
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes) {
dif <- norm(abs(nodes[[n]] - sample))
difs <- c(difs,dif)
})
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(difs)
hist(difs)
hist(difs, breaks=50)
hist(difs, breaks=100)
display(img)
display(t(img))
display(t(t(img)))
rotate(nodes[[1]], 90)
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
difs <- c()
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,36,36)
}
}
}
}
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
}
}
display(img)
img <- img[1500:1700, 750:1150]
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:1700, 750:1150]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 5) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
}
}
display(img)
i = 1
j = 1
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
n = 1
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
difs
plot sample
plot(sample)
hist(sample)
nodes[[1]] - sample
abs(nodes[[1]] - sample)
dif <- norm(abs(nodes[[1]] - sample))
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
display(img)
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in seq(1:(dim(img@.Data)[[1]]-25), 2)) {
for (j in seq(1:(dim(img@.Data)[[2]]-25), 2)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in seq(1, (dim(img@.Data)[[1]]-25), 2)) {
for (j in seq(1, (dim(img@.Data)[[2]]-25), 2)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
display(img)
dim(img)
dimg(img@.data)
difs <- matrix(1, dim(img))
difs <- matrix(1, dim(img), dim(img))
601*601
img[1,1]
source('~/.active-rstudio-document')
difs
source('~/.active-rstudio-document')
plot(difs)
plot(0,0, xlim=range(1,601), ylim=range(1,601))
points(matrix)
plot(matrix)
hist(matrix)
hist(difs)
hist(difs, breaks = 100)
difs <- matrix(NA, dim(img), dim(img))
for (i in seq(1, (dim(img)[[1]]-25), 5)) {
for (j in seq(1, (dim(img)[[2]]-25), 5)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
difs[i,j] <- norm(abs(nodes[[1]] - sample))
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
plot(difs)
plot(difs, na.rm=TRUE)
hist(difs)
hist(difs, breaks=50)
hist(difs, breaks=100)
hist(difs, breaks=150)
difs < 4
mask <- difs < 5
m[!is.finite(m)] <- FALSE
mask[!is.finite(m)] <- FALSE
mask[!is.finite(mask)] <- FALSE
mask
difs[!is.finite(difs)] <- FALSE
plot(difs)
hist(difs)
matrixLoop <- function(mat, sub, callback) {
x <- dim(mat)[[1]] - sub
y <- dim(mat)[[2]] - sub
for (i in 1:x) {
for (j in 1:y) {
callback(mat, i, j)
}
}
}
difs <- matrix(9, dim(img), dim(img))
matrixLoop(img@.Data, 25, function(mat, i, j) {
sample <- mat[i:(i+25), j:(j+25)]
difs[i,j] <- norm(abs(nodes[[1]] - sample))
})
hist(difs)
plot(difs)
img <- readImage("~/Desktop/test.tif")
display(im)
display(img)
img <- readImage("~/Desktop/test.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
cpy <- img
nodes
display(nodes[[1]])
version
library(BlueSkyUtils)
library(lubridate)
library(maptools)
setwd("~/projects/BikeShare/")
statuses <- read.csv("open_data_year_one/2015_status_data.csv")
# Convert unique times to POSIXct
statusTimes <- as.POSIXct(unique(statuses$time), format="%Y-%m-%d %H:%M:%S")
# Create an hourly sequence of dates
d1 <- as.POSIXct("2014-10-16")
d2 <- as.POSIXct("2015-10-12")
hourlySeq <- seq(d1,d2,by="hour")
# Merge the times and sort
mergedTimes <- sort(c(statusTimes, hourlySeq))
# Indices where our hourly mask is now
hourlyMask <- which(mergedTimes %in% hourlySeq)
# Only use hourly intervals that have actual times between them
hourlyDiffs <- hourlyMask[which(diff(hourlyMask) > 1)]
# The actual times and rounded times we'll be using
realTimes <- mergedTimes[hourlyDiffs - 1]
roundedTimes <- mergedTimes[hourlyDiffs]
# Now that we have the closest times, subset the original statuses with
# those times
statusSubset <- statuses[which(as.character(statuses$time) %in% as.character(realTimes)),]
# Replace the time with the corresponding rounded time
statusSubset$time <- roundedTimes[match(as.character(statusSubset$time), as.character(realTimes))]
# TODO is this the right approach?
# Combine available bikes and bikes_blocked
statusSubset$bikes <- statusSubset$bikes_available + statusSubset$bikes_blocked
# New data frame which shows missing values for stations
# instead of not including them
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
# Merge the two dataframes. This will fill in missing values for
# statusSubset
fullStatuses <- merge(fullStatuses, statusSubset, all.x=TRUE)
fullStatuses <- fullStatuses[with(fullStatuses, order(time, station_id)),]
head(fullStatuses)
dim(fullStatuses)
dim(fullStatuses)[[1]]/65
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
max(statuses$station_id)
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
dim(fullStatuses)
dim(fullStatuses)/65
1:max(statuses$station_id)
length(1:max(statuses$station_id))
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
hist(fullStatuses[,1])
hist(fullStatuses[,1], bins=65)
hist(fullStatuses[,1],breaks=65)
hist(fullStatuses[,1],breaks=66)
hist(fullStatuses[,1],breaks=67)
hist(fullStatuses[,1],breaks=100)
sum(fullStatuses[,1]==1)
sum(fullStatuses[,1]==2)
sum(fullStatuses[,1]==3)
sum(fullStatuses[,1]==0)
sum(fullStatuses[,1]==5)
?expand.grid
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
View(fullStatuses)
length(fullStatuses$station_id)
length(fullStatuses$station_id) / 65
length(roundedTimes)
fullStatuses <- merge(fullStatuses, statusSubset, all.x=TRUE)
hist(fullStatuses$station_id)
hist(fullStatuses$station_id, breaks=100)
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, statusSubset, all.x=FALSE)
?merge
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, statusSubset, all.x=FALSE, by=c("station_id", "time"))
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
View(statusSubset)
test <- merge(fullStatuses, statusSubset, by=c("station_id", "time"))
View(test)
test <- merge(fullStatuses, statusSubset)
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
fullStatuses$bikes = NA
names(fullStatuses) <- c("station_id", "time", "bikes")
head(fullStatuses[c(1,2)])
?intersect
statusSubset <- statusSubset[,-c(2:5)]
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
fullStatuses$bikes = NA
names(fullStatuses) <- c("station_id", "time", "bikes")
test <- merge(fullStatuses, statusSubset, sort=FALSE)
test <- merge(fullStatuses, statusSubset)
?merge
test <- merge(fullStatuses, statusSubset, all.x=TRUE)
length(test[,1])
length(test[,1])/65
fullStatuses <- fullStatuses[with(fullStatuses, order(time, station_id)),]
View(fullStatuses)
View(statusSubset)
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
test <- merge(fullStatuses, statusSubset, all.x=TRUE)
View(test)
View(fullStatuses)
test1 = paste0(test[,1], test[,2])
head(test1)
duplicated(test1)
sum(duplicated(test1))
which(duplicated(test1))
test[which(duplicated(test1)),]
test = test[-which(duplicated(test1)),]
?duplicated
dim(test)
dim(test)[1]
dim(test)[1]/65
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, statusSubset, all.x=TRUE)
fullStatuses = fullStatuses[-which(duplicated(fullStatuses)),]
fullStatuses <- fullStatuses[with(fullStatuses, order(time, station_id)),]
dim(fullStatuses[1]/65)
dim(fullStatuses[1])/65
dim(fullStatuses)[1]/65
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, statusSubset, all.x=TRUE)
fullStatuses <- fullStatuses[-which(duplicated(paste0(fullStatuses$station_id, fullStatuses$time))),]
fullStatuses <- fullStatuses[with(fullStatuses, order(time, station_id)),]
dim(fullStatuses)[1]/65
View(fullStatuses)
write.csv(fullStatuses$bikes, "clean_data/statuses.csv", row.names=FALSE)
test = statuses[statuses$station_id==1]
test = statuses[statuses$station_id==1,]
head(test)
test$time = as.POSIXct(test$time, format="%Y-%m-%d %H:%M:%S")
head(test)
test[400000,]
test[300000,]
test[350000,]
test[380000,]
test[370000,]
test[360000,]
test[365000,]
test[368000,]
test[367000,]
test[368000,]
test[367500,]
test[367800,]
test[367800,]
test[367700,]
test[367200,]
test[367400,]
test[367600,]
test[367550,]
test[367530,]
test[367510,]
test[367810,]
test[367610,]
test[367810,]
test[367710,]
test[367750,]
test[367740,]
head(test)
test[500,]
test[100,]
test[1000,]
test[1200,]
test[1100,]
test[1120,]
test[1100,]
head(test)
head(fullStatuses)
head(fullStatuses[fullStatuses$station_id == 1])
head(fullStatuses[fullStatuses$station_id == 1,])
test[1100,]
head(statusSubset)
head(fullStatuses)
