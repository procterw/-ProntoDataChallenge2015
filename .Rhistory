# crop an area with lots of bacteria
img <- img[1500:2000, 750:1250]
# 25x25 snapshots of nodes
node1 <- img[8:33, 10:35]
node2 <- img[10:35, 374:399]
node3 <- img[507:532, 459:484]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
}
}
source('~/.active-rstudio-document')
i = 1
j = 1
sample <- img[i:(i+25), j:(j+25)]
dif <- node1 - sample
dif <- norm(abs(nodes[[n]] - sample))
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes) {
dif <- norm(abs(nodes[[n]] - sample))
difs <- c(difs,dif)
})
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(difs)
hist(difs)
hist(difs, breaks=50)
hist(difs, breaks=100)
display(img)
display(t(img))
display(t(t(img)))
rotate(nodes[[1]], 90)
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
difs <- c()
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,36,36)
}
}
}
}
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
}
}
display(img)
img <- img[1500:1700, 750:1150]
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:1700, 750:1150]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 5) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
}
}
display(img)
i = 1
j = 1
sample <- img@.Data[i:(i+25), j:(j+25)]
for (n in 1:length(nodes)) {
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
if (min(difs) < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
}
n = 1
difs <- c(norm(abs(nodes[[n]] - sample)),
norm(abs(rotate(nodes[[n]], 90) - sample)),
norm(abs(rotate(nodes[[n]], 180) - sample)),
norm(abs(rotate(nodes[[n]], 270) - sample)))
difs
plot sample
plot(sample)
hist(sample)
nodes[[1]] - sample
abs(nodes[[1]] - sample)
dif <- norm(abs(nodes[[1]] - sample))
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
for (i in 1:(dim(img@.Data)[[1]]-25)) {
for (j in 1:(dim(img@.Data)[[2]]-25)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
display(img)
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in seq(1:(dim(img@.Data)[[1]]-25), 2)) {
for (j in seq(1:(dim(img@.Data)[[2]]-25), 2)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
img <- readImage("~/Desktop/tbdata/Phase 1/0224151150_xy05c1.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
# 25x25 snapshots of nodes
nodes <- list(
img@.Data[8:33, 10:35],
img@.Data[10:35, 374:399],
img@.Data[507:532, 459:484])
for (i in seq(1, (dim(img@.Data)[[1]]-25), 2)) {
for (j in seq(1, (dim(img@.Data)[[2]]-25), 2)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
dif <- norm(abs(nodes[[1]] - sample))
if(dif < 4) {
img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
}
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
display(img)
dim(img)
dimg(img@.data)
difs <- matrix(1, dim(img))
difs <- matrix(1, dim(img), dim(img))
601*601
img[1,1]
source('~/.active-rstudio-document')
difs
source('~/.active-rstudio-document')
plot(difs)
plot(0,0, xlim=range(1,601), ylim=range(1,601))
points(matrix)
plot(matrix)
hist(matrix)
hist(difs)
hist(difs, breaks = 100)
difs <- matrix(NA, dim(img), dim(img))
for (i in seq(1, (dim(img)[[1]]-25), 5)) {
for (j in seq(1, (dim(img)[[2]]-25), 5)) {
sample <- img@.Data[i:(i+25), j:(j+25)]
difs[i,j] <- norm(abs(nodes[[1]] - sample))
#
#     for (n in 1:length(nodes)) {
#
#       difs <- c(norm(abs(nodes[[n]] - sample)),
#                 norm(abs(rotate(nodes[[n]], 90) - sample)),
#                 norm(abs(rotate(nodes[[n]], 180) - sample)),
#                 norm(abs(rotate(nodes[[n]], 270) - sample)))
#
#       if (min(difs) < 4) {
#         img@.Data[i:(i+25), j:(j+25)] <- matrix(1,26,26)
#       }
#
#     }
}
}
plot(difs)
plot(difs, na.rm=TRUE)
hist(difs)
hist(difs, breaks=50)
hist(difs, breaks=100)
hist(difs, breaks=150)
difs < 4
mask <- difs < 5
m[!is.finite(m)] <- FALSE
mask[!is.finite(m)] <- FALSE
mask[!is.finite(mask)] <- FALSE
mask
difs[!is.finite(difs)] <- FALSE
plot(difs)
hist(difs)
matrixLoop <- function(mat, sub, callback) {
x <- dim(mat)[[1]] - sub
y <- dim(mat)[[2]] - sub
for (i in 1:x) {
for (j in 1:y) {
callback(mat, i, j)
}
}
}
difs <- matrix(9, dim(img), dim(img))
matrixLoop(img@.Data, 25, function(mat, i, j) {
sample <- mat[i:(i+25), j:(j+25)]
difs[i,j] <- norm(abs(nodes[[1]] - sample))
})
hist(difs)
plot(difs)
img <- readImage("~/Desktop/test.tif")
display(im)
display(img)
img <- readImage("~/Desktop/test.tif")
# Crank up the light
img <- img * 18
# crop an area with lots of bacteria
img <- img[1500:2100, 750:1350]
cpy <- img
nodes
display(nodes[[1]])
version
library(BlueSkyUtils)
library(lubridate)
library(maptools)
setwd("~/projects/BikeShare/")
statuses <- read.csv("open_data_year_one/2015_status_data.csv")
format <- "%Y-%m-%d %H:%M:%S"
statuses <- statuses[,-c(3,4,5)]
d1 <- as.POSIXct("2014-10-15")
d2 <- as.POSIXct("2015-10-12")
hourlySeq <- seq(d1,d2,by="hour")
times <- as.POSIXct(unique(statuses$time), format)
format <- "%Y-%m-%d %H:%M:%S"
times <- as.POSIXct(unique(statuses$time), format)
times <- as.POSIXct(unique(statuses$time), format=format)
head(times)
hourlySeq <- seq(d1,d2,by="hour")
test = hourlySeq[1:5]
test
t2 = which.min(difftime(test,times))
test <- c(times, hourlySeq)
test[1:5]
t1 = sort(test)
t1[1:50]
statuseTimes = times
statusTimes = times
rm(statuseTimes)
mergedTimes <- c(statusTimes, hourlySeq)
d1 <- as.POSIXct("2014-10-16")
d2 <- as.POSIXct("2015-10-12")
hourlySeq <- seq(d1,d2,by="hour")
mergedTimes <- c(statusTimes, hourlySeq)
head(mergedTimes)
hourlyMask <- which(mergedTimes %in% hourlySeq)
head(hourlyMask)
head(mergedTimes)
head(hourlySeq)
hourlyMask <- mergedTimes %in% hourlySeq
head(hourlyMask)
head(hourlyMask, 50)
head(hourlyMask, 100)
head(hourlyMask, 1000)
sum(hourlyMask)
length(hourlySeq)
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyMask
mergedTimes <- sort(c(statusTimes, hourlySeq))
hourlyMask <- which(mergedTimes %in% hourlySeq)
head(hourlyMask)
hourlyMask
min(diff(hourlyMask))
plot(diff(hourlyMask))
plot(statusTimes)
plot(statusTimes, type='l')
min(difftime(statusTimes))
min(diff(statusTimes))
plot(diff(statusTimes))
plot(diff(statusTimes), type='l')
plot(diff(statusTimes), type='l')
hourlyMask <- which(mergedTimes %in% hourlySeq)
head(hourlyMask)
hourlyDiffs <- which(diff(hourlyMask) < 2)
hourlyDiffs
hourlyDiffs + 1
test <- hourlyMask[-(hourlyDiffs+1)]
hourlyDiffs <- which(diff(test) < 2)
hourlyDiffs
mergedTimes <- mergedTimes[-(hourlyDiffs+1)]
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyMask
mergedTimes <- sort(c(statusTimes, hourlySeq))
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyDiffs <- which(diff(hourlyMask) < 2)
hourlyDiffs
hourlyDiffs <- which(diff(hourlyMask) < 2) + 1
mergedTimes[hourlyDiffs]
mergedTimes[hourlyDiffs + 1]
mergedTimes <- sort(c(statusTimes, hourlySeq))
hourlyMask <- which(mergedTimes %in% hourlySeq)
mergedTimes[hourlyMask]
hourlyDiffs <- which(diff(hourlyMask) < 2)
hourlyDiffs
mergedTimes[hourlyDiffs]
mergedTimes[hourlyDiffs + 1]
hourlyDiffs <- hourlyMask[which(diff(hourlyMask) < 2)]
hourlyDiffs
hourlyMask[hourlyDiffs]
mergedTimes[hourlyDiffs]
mergedTimes[hourlyDiffs+1]
mergedTimes <- mergedTimes[-(hourlyDiffs)]
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyDiffs <- hourlyMask[which(diff(hourlyMask) < 2)] + 1
hourlyDiffs
mergedTimes <- sort(c(statusTimes, hourlySeq))
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyDiffs <- hourlyMask[which(diff(hourlyMask) < 2)] + 1
mergedTimes <- mergedTimes[-(hourlyDiffs)]
hourlyMask <- which(mergedTimes %in% hourlySeq)
mergedTimes <- sort(c(statusTimes, hourlySeq))
hourlyMask <- which(mergedTimes %in% hourlySeq)
hourlyDiffs <- hourlyMask[which(diff(hourlyMask) > 1)]
hourlyDiffs
mergedTimes[hourlyDiffs]
mergedTimes[hourlyDiffs - 1]
targetTimes <- mergedTimes[hourlyDiffs - 1]
targetTimes
realTimes <- mergedTimes[hourlyDiffs - 1]
roundedTimes <- mergedTimes[hourlyDiffs]
realTimes
roundedTimes
realTimes
statuses$time[1]
as.character(realTimes[1])
test <- which(as.character(statuses$time) %in% as.character(realTimes))
test[1:50]
test2 <- statuses[test,]
head(statuses)
realTimes[1]
realTimes[2]
realTimes[3]
test3 <- statuses$index <- test
test <- which(as.character(statuses$time) %in% as.character(realTimes))
test3 <- statuses$index <- which(statuses$index %in% realTimes)
test3 <- statuses$index <- which(statuses$time %in% realTimes)
head(statuses$time)
test3 <- test2$index <- which(test2$time %in% realTimes)
test2$time[1:100]
which(as.character(test2$time) %in% as.character(realTimes))
head(as.character(test2$time))
realTimes
roundedTimes
as.character(test2$time) %in% as.character(realTimes)
which(as.character(test2$time) %in% as.character(realTimes))
head(as.character(test2$time))
head(realTimes)
test2$index <- which(as.character(realTimes) %in% as.character(test2$time))
as.character(realTimes) %in% as.character(test2$time)
which(as.character(realTimes) %in% as.character(test2$time))
test2$index <- match(as.character(realTimes) %in% as.character(test2$time))
test2$index <- match(as.character(test2$time), as.character(realTimes))
View(test2)
test2$roundedTime <- as.character(roundedTimes[test2$index])
hist(test2$station_id)
test2 <- test2[-c("time, index")]
test2 <- test2[,-c("time, index")]
test2 <- test2[,-c("time", "index")]
test2$index <- NULL
test2$time <- NULL
test2 <- statuses[test,]
test2$index <- match(as.character(test2$time), as.character(realTimes))
test2$roundedTime <- roundedTimes[test2$index]
plot(test2[test2$station_id==1]$roundedTime,test2[test2$station_id==1]$bikes_available,)
plot(test2[test2$station_id==1]$roundedTime,test2[test2$station_id==1]$bikes_available)
x = test2[test2$station_id == 1]
x = test2[test2$station_id == 1,]
x = test2[test2$station_id == 1,]$roundedTime
y = test2[test2$station_id == 1,]$bikes_available
plot(x,y)
plot(x,y, type='l')
?data.frame
test = expand.grid(roundedTimes,1:max(statuses$station_id))
View(test)
test = expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
View(fullStatuses)
test <- fullStatuses$station_id == test2$station_id
test2 <- statuses[test,]
test2$time <- roundedTimes[ match(as.character(test2$time), as.character(realTimes))]
test2$time <- roundedTimes[match(as.character(test2$time), as.character(realTimes))]
test2 <- statuses[test,]
test <- which(as.character(statuses$time) %in% as.character(realTimes))
test2 <- statuses[test,]
test2$time <- roundedTimes[match(as.character(test2$time), as.character(realTimes))]
test <- merge(test2, fullStatuses)
View(test)
plot(test$bikes_available)
fullStatuses = test
range(test$bikes_available)
hist(test$station_id)
?merge
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(test2, fullStatuses, all.x=TRUE)
hist(fullStatuses$station_id)
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)
hist(fullStatuses$station_id)
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)[order(time, station_id),]
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)[order(time, station_id),]
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)[order("time", "station_id"),]
fullStatuses <- expand.grid(1:max(statuses$station_id),roundedTimes)
names(fullStatuses) <- c("station_id", "time")
fullStatuses <- merge(fullStatuses, test2, all.x=TRUE)
test = fullStatuses[with(fullStatuses, order(time, station_id)),]
View(test)
fullStatuses=test
write.csv(fullStatuses$bikes_available, "test.csv")
write.csv(fullStatuses$bikes_available, "test.csv", row.names=FALSE)
read.csv("open_data_year_one/2015_status_data.csv")
statuses <- read.csv("open_data_year_one/2015_status_data.csv")
head(statuses)
write.csv(fullStatuses$bikes_available, "clean_data/statuses.csv", row.names=FALSE)
